generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id          String         @id @default(uuid())
  name        String         @unique
  address     String?
  phone       String?
  email       String?
  logoUrl     String?        
  primaryColor String?       @default("#3b82f6")
  secondaryColor String?     @default("#8b5cf6")
  customDashboardConfig Json?
  consultationFee Float      @default(3000)
  subscription Subscription?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  users          User[]
  consultations  Consultation[]
  products       Product[]
  appointments   Appointment[]
  payments       Payment[]
  treatments     Treatment[]

  @@map("clinics")
}

model Subscription {
  id            String              @id @default(uuid())
  clinic        Clinic              @relation(fields: [clinicId], references: [id])
  clinicId      String              @unique
  startDate     DateTime            @default(now())
  endDate       DateTime
  trialEndsAt   DateTime?           
  status        SubscriptionStatus  @default(pending)
  paymentStatus SubscriptionPaymentStatus @default(PENDING)
  reference     String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("subscriptions")
}


enum SubscriptionStatus {
  pending
  active
  expired
  trial
}

enum SubscriptionPaymentStatus {
  PENDING
  PAYED  
  FAILED
}
model User {
  id            String         @id @default(uuid())
  clerkUserId   String         @unique
  firstName     String
  lastName      String
  email         String         @unique
  password      String?
  role          Role           @default(ASSISTANT)
  phone         String?
  lastLogin     DateTime?
  isActive      Boolean        @default(true)
  isClinicOwner Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clinicId      String?
  clinic        Clinic?        @relation(fields: [clinicId], references: [id])

  createdConsultations        Consultation[] @relation("CreatedConsultations")
  dentistConsultations        Consultation[] @relation("DentistConsultations")
  assistantConsultations      Consultation[] @relation("AssistantConsultations")

  dentistAppointments         Appointment[]  @relation("DentistAppointments")
  createdAppointments         Appointment[]  @relation("CreatedAppointments")

  paymentsCreated             Payment[]      @relation("CreatedPayments")
  products                    Product[]

  @@index([clerkUserId, clinicId])
  @@map("users")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DENTIST
  ASSISTANT
}

model Consultation {
  id             String        @id @default(uuid())
  patientName    String
  patientPhone   String
  patientAddress String?
  patientAge     Int?
  patientGender  String?
  dentistNote    String?
  assistantNote  String?
  date           DateTime      @default(now())
  description    String?
  isPaid         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  clinic         Clinic        @relation(fields: [clinicId], references: [id])
  clinicId       String

  createdBy      User          @relation("CreatedConsultations", fields: [createdById], references: [id])
  createdById    String

  dentist        User?         @relation("DentistConsultations", fields: [dentistId], references: [id])
  dentistId      String?

  assistant      User?         @relation("AssistantConsultations", fields: [assistantId], references: [id])
  assistantId    String

  treatments     Treatment[]
  payments       Payment[]
  appointments   Appointment[]

  @@unique([patientPhone, clinicId])
  @@map("consultations")
}

model Treatment {
  id              String        @id @default(uuid())
  type            String
  amount          Float
  paidAmount      Float         @default(0)
  remainingAmount Float         @default(0)
  status          TreatmentPaymentStatus @default(UNPAID)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  clinic          Clinic        @relation(fields: [clinicId], references: [id])
  clinicId        String

  consultation    Consultation  @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId  String

  payments        Payment[]

  @@index([consultationId, clinicId])
  @@map("treatments")
}

enum TreatmentPaymentStatus {
  UNPAID  @map("non payé")
  PAID    @map("payé")
  PARTIAL @map("partiel")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float     @default(0)
  stock       Int       @default(0)
  used        Int       @default(0)
  disponible  Int       @default(0)
  updatedAt   DateTime  @updatedAt
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  clinic      Clinic    @relation(fields: [clinicId], references: [id])
  clinicId    String

  @@unique([name, clinicId])
  @@map("products")
}

model Appointment {
  id             String        @id @default(uuid())
  patientName    String
  patientPhone   String
  date           DateTime
  reason         String
  status         AppointmentStatus @default(scheduled)
  createdAt      DateTime      @default(now())

  clinic         Clinic        @relation(fields: [clinicId], references: [id])
  clinicId       String

  consultation   Consultation? @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  consultationId String

  dentist        User          @relation("DentistAppointments", fields: [dentistId], references: [id])
  dentistId      String

  createdBy      User          @relation("CreatedAppointments", fields: [createdById], references: [id])
  createdById    String

  @@map("appointments")
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  paymentMethod String        @default("CASH")
  paymentDate   DateTime
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        String        @default("PENDING") // AJOUT: PENDING/COMPLETED/FAILED
  isTest        Boolean       @default(false)     // AJOUT: Pour marquer les paiements test
  paydunyaToken String?                          // AJOUT: Token de transaction PayDunya

  // Relations
  clinic        Clinic        @relation(fields: [clinicId], references: [id])
  clinicId      String

  consultation  Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?

  treatment     Treatment?    @relation(fields: [treatmentId], references: [id])
  treatmentId   String?

  createdBy     User          @relation("CreatedPayments", fields: [createdById], references: [id])
  createdById   String

  @@map("payments")
}

enum AppointmentStatus {
  scheduled
  cancelled
  completed
  no_show
}